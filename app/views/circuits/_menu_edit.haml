//
// @Authors:    
//      Brizuela Lucia                  lula.brizuela@gmail.com
//      Guerra Brenda                   brenda.guerra.7@gmail.com
//      Crosa Fernando                  fernandocrosa@hotmail.com
//      Branciforte Horacio             horaciob@gmail.com
//      Luna Juan                       juancluna@gmail.com
//      
//  @copyright (C) 2010 MercadoLibre S.R.L
//
//
//  @license        GNU/GPL, see license.txt
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see http://www.gnu.org/licenses/.
//
    
//Tools menu
-content_for :tools_menu do

  //Save
  -if @readonly
    =image_tag("/images/icons/d_save.png",:alt=>"save",:title=>_("Without Edit Permissions "), :onclick=>"alert('#{_("You do not have Edit Permissions")}')",:style=>" height: 23px; width: 23px;margin-left:35px;")
    =image_tag("/images/icons/d_comment.png", 	:alt=>"comment", :title=>_('Save with Comments'),:onClick =>"alert('#{_("You do not have Edit Permissions")}')")
  -else
    =image_tag("/images/icons/save.png", :id =>"save_button",:alt=>"save", :title =>_("Save"), :style=>"margin-left:35px; visibility:hidden;",:onClick => remote_function(:update => "save_message", :method=>:put, :url=>project_circuit_path(@circuit.project_id, @circuit), :with => "'content=' + encodeURI(encode_text(codepress_content_free.getCode())) + '&originalcontent=' + encodeURI(document.getElementById('originalcontent').value)" ))
    =image_tag("/images/icons/comment.png", :id =>"savewc_button",:alt=>"comment", :title=>_('Save with Comments'), :style=>"visibility:hidden;",:onClick => "document.getElementById('comment_save').toggle();")
    
  //Sintax check  
  =link_to_remote image_tag("/images/icons/bug.png", :alt=>"sintax check", :title=>_('Sintax Check')), :url => {:controller => "circuits", :circuit_id=>@circuit.id, :project_id=>@circuit.project_id, :action => "checkit"},:with=>"'code='+encodeURIComponent(encode_text(codepress_content_free.getCode()))", :update => "checker", :complete => "document.getElementById('checker').show();", :method => :post
  
  //Data recovery
  =image_tag("/images/icons/recovery.png",:alt=>"recovery",:title =>_("Data Recovery"),:onClick => remote_function(:complete => "document.getElementById('div_data_recoveries').show();",:update => "div_data_recoveries",  :method => "get",  :url=>project_circuit_data_recovery_names_path(@project_id,@circuit)))

  //Versions
  -if @previous_version
    =image_tag("/images/icons/backward.png",:alt=>"backward",:title=>_('Previous Version ')+"(#{@previous_version})",:onClick => "location.href='#{edit_project_circuit_path(@circuit.project_id,@circuit)}?version=#{@previous_version}'", :id => "version_back")
  -else
    =image_tag("/images/icons/backward.png", :style => "display:none;",:alt=>"backward",:title=>_('Previous Version ')+"(#{@previous_version})", 	:onClick => "location.href='#{edit_project_circuit_path(@circuit.project_id,@circuit)}/edit?version=#{@previous_version}'", :id => "version_back")
  -if @next_version
    =image_tag("/images/icons/forward.png", :alt=>"forward", :title=>_('Next Version ')+"(#{@next_version})",:onClick => "location.href='#{edit_project_circuit_path(@circuit.project_id,@circuit)}?version=#{@next_version}'", :id => "version_forward")
    
  //Versions 
  =image_tag("/images/icons/versions.png",:alt=>"versions.png",   :title=>_('Change History'),:onClick => "location.href='/circuits/versions/#{@circuit.id}'")
 
  //Export
  =image_tag("/images/icons/import.png",:alt=>"export",  :title=>_('Export Script'),:onclick=>"$j('#import_circuit').show();")
  
  //Functions
  -if !@readonly
    =link_to_function image_tag("/images/icons/functions.png",     	 :title=>_('Functions'), :alt=>"functions"), 				:onclick => remote_function(:complete => "$j('#div_with_functions').show();", :update => "div_with_functions", :url => "/user_functions/find_per_project")
    
  //Script in suite
  =image_tag("icons/suiteq.png", :alt=>"suite_min.png", :title=>_('Suites containing this script'),  :onClick => remote_function(:complete => "$j('#suites_of_script').show();",:update => "suites_of_script",  :method => "get",  :url => { :controller => :circuits , :action => :get_suites_of_script, :id => @circuit.id }) )
   
  //Ruby
  =link_to image_tag("/images/icons/ruby.png",:alt=>"ruby"), help_path(3) , :title=>_('Ruby Help') , :popup => true

  //Info
  =image_tag( "/images/icons/info.png", :alt=>"info",:title=>_('Information'),   :onClick => "$j('#infoCircuit').show();", :style=>"padding-right:20px;border-right: 1px solid #C6C5C4;")

  //Panel Execution

  //History 
  =image_tag( "/images/icons/clock.png",:alt=>"clock.png", :title=>_('Execution History'), :onClick => "location.href='/suite_executions?[filter][model]=scripts&[filter][suite_id]=0&[filter][circuit_id]=#{@circuit.id}&[filter][case_id]=' + $j('#cases_id').val() ;")
    
  //Execution Config
  =image_tag("/images/icons/config.png",  :alt=>"config.png", :title=>_('Execution Panel'),:onClick => remote_function(:complete => "document.getElementById('execution_panel').show();", :update => "execution_panel", :url => "/context_configurations/user_context_configuration_values"))

  %div{ :style=>"margin:auto;width:300px;display:inline;padding-left:10px;"}
    //Cases
    -cases = [[_("Without Cases"), ""]] + @circuit.case_templates.collect{|c| [ truncate(c.objective.capitalize, :ommision => "...", :length => 70), c.id ]}
    -value =  @execution_running? @execution_running.case_template_id : ""
    =select("cases", "id",  cases ,{:selected => value},{:style => "width:150px;vertical-align:9px;"})

    //Play
    =image_tag( "/images/icons/play.png", :alt=>"play",:title=>_('Run'), :onClick => "location='/suite_executions/create?case_template_id=' +  $j('#cases_id').val() + '&where_did_i_come=circuits_edit&project_id=#{@project_id}&circuit_id=#{@circuit.id}'")
    //Ejecution Result
    -if @execution_running
      =render :partial=>'execution', :locals=> {:execution=>@execution_running}
      =periodically_call_remote(:url => {:controller=>:executions, :action => :show, :id =>  @execution_running.id}, :method=>:get, :condition => "execution_finish_#{@execution_running.id.to_s} == false", :frequency => 8)

  //Queue observers
  =render :partial => "queue_observers/queue_icon"
  %div{ :style=>"clear: both"}

  
//Save with comment
=render :partial => "save_with_comment"

//Import script
=render :partial => "import_script"

//Data recovery
#div_data_recoveries{:style=>"display:none;"}

//Functions
#div_with_functions{:style=>"display:none;"}

//Check data
#checker{:style=>"display:none;"}

//Suites of script
#suites_of_script{:style=>"display:none;"}

//Execution pannel
.div{:id=>"execution_panel",:style => "display:none; "}
  
//Help 
=render :partial => "info_script"
