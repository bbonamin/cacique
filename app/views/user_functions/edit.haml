//
//  @Authors:
//      Brizuela Lucia                  lula.brizuela@gmail.com
//      Guerra Brenda                   brenda.guerra.7@gmail.com
//      Crosa Fernando                  fernandocrosa@hotmail.com
//      Branciforte Horacio             horaciob@gmail.com
//      Luna Juan                       juancluna@gmail.com
//
//  @copyright (C) 2010 MercadoLibre S.R.L
//
//
//  @license        GNU/GPL, see license.txt
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see http://www.gnu.org/licenses/.
//
-javascript 'user_function'
-javascript 'onclick_iframe'

%script{ :language => "javascript", :src => "/codepress.js" }
%script
  //used in codepress
  var add_event = true;
  var add_asterisk = true;
  function restrictEnterKey(event) {
  var key=(event.charCode)?event.charCode:((event.keyCode)?event.keyCode:((event.which)?event.which:0));
  if (add_asterisk){
  if((key == 13) || (key == 8) || ( (key >= 41) && (key <= 255) )){
  document.getElementById('modified_file').innerHTML = '*';
  add_asterisk = false;
  }
  }
  }
  function is_read_only(){
  ="return #{@has_permission}"
  }
%script
  //For save before leave if there are changes in the Function
  window.onbeforeunload = function (evt) {
  var message = "#{_('You have Unsaved Changes, do you want to Save before Exit?')}";
  if(!add_asterisk){
  if (evt) {
  evt.returnValue = message;
  }
  return message;
  }
  }   
  function is_read_only(){
  ="return #{@readonly}"
  }


    
%h1{:style=>"width:80%; float: left;"}
  =_('Edit Function')

%h2{:style=>"float:right;width:20%;text-align: right;"}
  =_('Project')
  = (@user_function.project_id !=0) ? truncate(@user_function.project.name.capitalize , :ommision => "...", :length => 30) : _('Generals')  



#checker{:style=>"display:none; "}

.form{:style=>" margin-left:30px; margin-top:20px;clear:both;"}
  -form_for @user_function, :url => { :controller => "user_functions",:action => 'update', :id => @user_function.id}, :html =>{:id=>"form_edit_free"} do |f|
    = error_messages_for :user_function
    
    %label{:for => "name" } 
      =_('Name')
      %br
      =f.text_field :name, {:size => 28, :maxlength => 50 ,:onblur=>"document.getElementById('function_head').innerHTML='Def ' + this.value"}
    %br
    %br
    %label{:for => "description"} 
      =_('Description')
      %br
      =f.text_area :description, {:rows => 6, :style => "width:750px;"}
    %br
    %br
    -if(@user_function.project_id != 0)
      %label{:for => "visibility"} 
        =f.check_box :visibility, {:onClick => "$j('#visibility_message').toggle();"}
        =_('Public visibility')
        %div{:id => "visibility_message", :style => "display:#{(@user_function.visibility ? '-moz-stack' : 'none' )};color:blue;"}
          =_("The function can be used by all users")
    %label{:for => "hide"} 
      =f.check_box :hide, {:onClick => "$j('#hide_message').toggle();"}
      =_('Hide the code of the function')
      %div{:id => "hide_message", :style => "display:#{(@user_function.hide ? '-moz-stack' : 'none' )};color:red;"}
        =_("Will hide the code and the example of the function")
    %br
    %div{ :style => "-moz-background-inline-policy:continuous;-moz-border-radius:10px 10px 10px 10px;border:1px solid #C3C3C3;padding:5px 20px;" }  
      %label{:for => "cant_args"}
        =_('Arguments')
        %br
        %img{:src => "/images/icons/add_blue.gif", :alt=>"add_blue.gif", :title=>_('New'), :onClick => "add_argument();", :style=>"cursor:pointer; width:15px; height:15px;"}
        #div_arguments_table
          %table{:id => 'arguments_table'}
            - n = 0
            -@arguments.each do |argument|
              %tr{ :id => "row_"+ n.to_s}
                %td
                  %input{ :id => "user_function_args_" + n.to_s, :name => "user_function[args][#{n}]", :value => argument}
                %td
                  %img{:name => "row_" + n.to_s, :src => "/images/icons/cross.png", :alt => "cross.png", :style => "cursor:pointer; height:12px; width:12px; margin-left:10px;", :onClick => "eliminarArgument(this.name);"}
              -n += 1
            //Add the number of arguments it has the function
            %script
              cant_args_add = #{n};
      %br
      %br
      %label{:for => "source_code"}
        =_('Code')
        %div{:style=>"margin-top:10px;font-size:12px; color: #375DC0;"}
        #definition{:style=>"width: 100 px;"}
          //Sintax check
          =link_to_remote image_tag("/images/icons/bug.png", :alt=>"syntax check", :title=>_('Syntax Check'), :style=>"align: left;border: none;display: inline;"), :url => {:controller => "circuits", :action => "checkit"},:with=>"'code='+encodeURIComponent(encode_text(codepress_content_free.getCode()))", :update => "checker", :complete => "document.getElementById('checker').toggle();", :method => :post
          //Versions
          -if @previous_version
            %img{:src => "/images/icons/backward.png", :alt=>"backward",:title=>_('Previous Version ')+"(#{@previous_version})", 	:onClick => "location.href='/user_functions/edit/#{@user_function.id}?version=#{@previous_version}'", :id => "version_back", :style=>"cursor:pointer;"}
          -if @next_version
            %img{:src => "/images/icons/forward.png",  :alt=>"forward", :title=>_('Next Version ')+"(#{@next_version})",    :onClick => "location.href='/user_functions/edit/#{@user_function.id}?version=#{@next_version}'", :id => "version_forward", :style=>"cursor:pointer;"}
 
          %div{ :id => "modified_file", :style => "width:1%;float:left;display:none;"}
          %div{:id => "function_head"}
            Def
        %input{ :type => "hidden", :name => "content",         :value => "" }
        %textarea{ :id => "codepress_content_free", :name=>"content_free", :class => "codepress ruby linenumbers-on", :style=>"width:100%; height:335px;"}
          =@source_code.gsub("\r\n","\r").gsub("\n\r","\r").gsub("\n","\r") if @source_code
        =f.hidden_field :code, :value => ""
        %div{:style=>"margin-top:0px; font-size:12px; color: #375DC0;"}
          End
      %br
      %br
      %label{:for => "example"} 
        =_('Example')
        %br
        =f.text_area :example, {:rows => 6, :style => "width:750px;"}
      %br
      %br
    %br  
    %div{ :style => "float:right;" }
      = submit_tag _('Save'),:onclick => "sendContent();" ,:style => "margin-right:10px;cursor:pointer;"
      -if @user_function.project_id == 0
        -url_cancel = "/user_functions"
      -else
        -url_cancel = "/user_functions?filter[project_id]=#{@user_function.project_id}"
      %input{:type=>"button", :value=>_("Cancel"), :onclick => "if(confirm('#{_('Are you sure you want to quit?')}'))location='#{url_cancel}';", :style=>"cursor:pointer;"}
    %br
    %br
    %b
      =_('Last modified by the user')
      \:
    =truncate(@last_modifier.name, :ommision => "...", :length => 30)
    %br
    %br
    
//Tools menu
-content_for :tools_menu do
  =render :partial=> "admin/menu_admin"
